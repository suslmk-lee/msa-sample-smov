apiVersion: v1
kind: ConfigMap
metadata:
  name: ui-files
  namespace: theater-msa
  labels:
    app: theater-msa
    component: ui
data:
  style.css: |
    /* 기본 스타일 */
    body {
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: #333;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    }

    h1 {
        text-align: center;
        color: #4a5568;
        margin-bottom: 10px;
        font-size: 2.5em;
    }

    .subtitle {
        text-align: center;
        color: #718096;
        margin-bottom: 30px;
        font-size: 1.1em;
    }

    .section {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid #e2e8f0;
        border-radius: 10px;
        background: #f7fafc;
    }

    /* 데이터 섹션들을 3열로 배치 */
    .data-sections {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .data-section {
        padding: 15px;
        border: 1px solid #e2e8f0;
        border-radius: 10px;
        background: #f7fafc;
        min-height: 400px;
    }

    .data-section h2 {
        color: #2d3748;
        border-bottom: 2px solid #4299e1;
        padding-bottom: 10px;
        margin-bottom: 15px;
        font-size: 1.2em;
    }

    .data-section button {
        padding: 8px 16px;
        margin-bottom: 15px;
        font-size: 0.9em;
    }

    .data-section .data-item {
        padding: 10px;
        margin: 8px 0;
        font-size: 0.9em;
        border-left: 3px solid #4299e1;
    }

    .data-section .book-btn {
        padding: 6px 12px;
        font-size: 0.8em;
        margin-top: 8px;
    }

    .section h2 {
        color: #2d3748;
        border-bottom: 2px solid #4299e1;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    button {
        background: linear-gradient(135deg, #4299e1, #3182ce);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin-bottom: 15px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(66, 153, 225, 0.4);
    }

    .data-item {
        background: white;
        padding: 15px;
        margin: 10px 0;
        border-radius: 8px;
        border-left: 4px solid #4299e1;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: transform 0.2s ease;
    }

    .data-item:hover {
        transform: translateY(-2px);
    }

    .book-btn {
        background: linear-gradient(135deg, #48bb78, #38a169);
        padding: 8px 16px;
        font-size: 0.9em;
        margin-top: 10px;
    }

    .book-btn:hover {
        box-shadow: 0 5px 15px rgba(72, 187, 120, 0.4);
    }

    /* 배포 상태 스타일 */
    .deployment-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .deployment-item {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }

    .deployment-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }

    .deployment-item.status-running {
        border-color: #48bb78;
    }

    .deployment-item.status-stopped {
        border-color: #f56565;
    }

    .service-header {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #e2e8f0;
    }

    .service-icon {
        font-size: 2em;
        margin-right: 15px;
    }

    .service-header h3 {
        margin: 0;
        color: #2d3748;
        font-size: 1.4em;
    }

    .deployment-details {
        font-size: 0.95em;
    }

    .detail-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #f1f5f9;
    }

    .detail-row:last-child {
        border-bottom: none;
    }

    .status-row {
        margin-top: 10px;
        padding-top: 15px;
        border-top: 2px solid #e2e8f0;
    }

    .status-badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-weight: bold;
        font-size: 0.85em;
        text-transform: uppercase;
    }

    .badge-running {
        background: #c6f6d5;
        color: #22543d;
    }

    .badge-stopped {
        background: #fed7d7;
        color: #742a2a;
    }

    .deployment-summary {
        background: linear-gradient(135deg, #4299e1, #3182ce);
        color: white;
        padding: 25px;
        border-radius: 10px;
        margin-top: 20px;
    }

    .deployment-summary h4 {
        margin-top: 0;
        margin-bottom: 20px;
        font-size: 1.3em;
        text-align: center;
    }

    .summary-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .summary-item {
        background: rgba(255, 255, 255, 0.1);
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        backdrop-filter: blur(10px);
    }

    .deployment-note {
        background: rgba(255, 255, 255, 0.1);
        padding: 15px;
        border-radius: 8px;
        margin: 0;
        font-size: 0.95em;
        line-height: 1.6;
        backdrop-filter: blur(10px);
    }

    /* 반응형 디자인 */
    @media (max-width: 768px) {
        .container {
            padding: 15px;
            margin: 10px;
        }
        
        .data-sections {
            grid-template-columns: 1fr;
        }
        
        .data-section {
            min-height: 300px;
        }
        
        .deployment-grid {
            grid-template-columns: 1fr;
        }
        
        .summary-grid {
            grid-template-columns: 1fr;
        }
        
        h1 {
            font-size: 2em;
        }
    }

    @media (max-width: 1024px) and (min-width: 769px) {
        .data-sections {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .data-section:last-child {
            grid-column: span 2;
        }
    }

  index.html: |
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Theater MSA</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div class="container">
            <h1>🎬 Theater Management System</h1>
            <p class="subtitle">멀티클라우드 MSA 데모 애플리케이션</p>
            
            <div class="data-sections">
                <div class="data-section">
                    <h2>👥 사용자 목록</h2>
                    <button onclick="loadUsers()">새로고침</button>
                    <div id="users">로딩 중...</div>
                </div>
                
                <div class="data-section">
                    <h2>🎭 영화 목록</h2>
                    <button onclick="loadMovies()">새로고침</button>
                    <div id="movies">로딩 중...</div>
                </div>
                
                <div class="data-section">
                    <h2>📋 예약 내역</h2>
                    <button onclick="loadBookings()">새로고침</button>
                    <div id="bookings">로딩 중...</div>
                </div>
            </div>
            
            <div class="section">
                <h2>☁️ 멀티클라우드 배포 상태</h2>
                <button onclick="loadDeploymentStatus()">상태 확인</button>
                <div id="deployment-status">로딩 중...</div>
            </div>
        </div>
        <script src="script.js"></script>
    </body>
    </html>

  script.js: |
    // 전역 변수
    let currentUsers = [];
    let currentMovies = [];
    let currentBookings = [];

    // ID를 이름으로 변환하는 헬퍼 함수들
    function getUserNameById(userId) {
        const user = currentUsers.find(u => u.id === userId);
        return user ? user.name : userId;
    }

    function getMovieTitleById(movieId) {
        const movie = currentMovies.find(m => m.id === movieId);
        return movie ? movie.title : movieId;
    }

    // 초기 데이터 생성 및 로딩
    window.onload = function() {
        initializeData();
        loadUsers();
        loadMovies();
        loadBookings();
        loadDeploymentStatus();
    };

    async function initializeData() {
        // 기존 데이터 확인
        try {
            const usersResponse = await fetch('/users/');
            const existingUsers = await usersResponse.json();
            
            const moviesResponse = await fetch('/movies/');
            const existingMovies = await moviesResponse.json();
            
            // 이미 데이터가 있으면 초기화 건너뛰기
            if (existingUsers.length > 0 && existingMovies.length > 0) {
                console.log('기존 데이터가 있어 초기화를 건너뜁니다.');
                return;
            }
        } catch (error) {
            console.log('기존 데이터 확인 중 오류:', error);
        }

        // 초기 사용자 데이터 생성
        const users = [
            { name: '김영희', email: 'kim@example.com' },
            { name: '이철수', email: 'lee@example.com' },
            { name: '박민수', email: 'park@example.com' }
        ];

        // 초기 영화 데이터 생성
        const movies = [
            { title: '어벤져스: 엔드게임', genre: '액션', year: 2019 },
            { title: '기생충', genre: '드라마', year: 2019 },
            { title: '탑건: 매버릭', genre: '액션', year: 2022 }
        ];

        // 사용자 데이터 초기화
        for (const user of users) {
            try {
                await fetch('/users/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(user)
                });
            } catch (error) {
                console.log('사용자 데이터 초기화 중 오류:', error);
            }
        }

        // 영화 데이터 초기화
        for (const movie of movies) {
            try {
                await fetch('/movies/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(movie)
                });
            } catch (error) {
                console.log('영화 데이터 초기화 중 오류:', error);
            }
        }
    }

    async function loadUsers() {
        try {
            const response = await fetch('/users/');
            const users = await response.json();
            currentUsers = users; // 전역 변수에 저장
            displayUsers(users);
        } catch (error) {
            document.getElementById('users').innerHTML = '<p style="color: red;">사용자 데이터 로딩 실패</p>';
        }
    }

    async function loadMovies() {
        try {
            const response = await fetch('/movies/');
            const movies = await response.json();
            currentMovies = movies; // 전역 변수에 저장
            displayMovies(movies);
        } catch (error) {
            document.getElementById('movies').innerHTML = '<p style="color: red;">영화 데이터 로딩 실패</p>';
        }
    }

    async function loadBookings() {
        try {
            const response = await fetch('/bookings/');
            const bookings = await response.json();
            currentBookings = bookings; // 전역 변수에 저장
            displayBookings(bookings);
        } catch (error) {
            document.getElementById('bookings').innerHTML = '<p style="color: red;">예약 데이터 로딩 실패</p>';
        }
    }

    function displayUsers(users) {
        const userDiv = document.getElementById('users');
        if (users && users.length > 0) {
            userDiv.innerHTML = users.map(user => 
                `<div class="data-item">
                    <strong>${user.name}</strong><br>
                    이메일: ${user.email}<br>
                    ID: ${user.id}
                </div>`
            ).join('');
        } else {
            userDiv.innerHTML = '<p>등록된 사용자가 없습니다.</p>';
        }
    }

    function displayMovies(movies) {
        const movieDiv = document.getElementById('movies');
        if (movies && movies.length > 0) {
            movieDiv.innerHTML = movies.map(movie => 
                `<div class="data-item" data-movie-id="${movie.id}">
                    <strong>${movie.title}</strong><br>
                    장르: ${movie.genre}<br>
                    년도: ${movie.year}<br>
                    <button onclick="bookMovie('${movie.id}', '${movie.title}')" class="book-btn">예약하기</button>
                </div>`
            ).join('');
        } else {
            movieDiv.innerHTML = '<p>등록된 영화가 없습니다.</p>';
        }
    }

    function displayBookings(bookings) {
        const bookingDiv = document.getElementById('bookings');
        if (bookings && bookings.length > 0) {
            bookingDiv.innerHTML = bookings.map(booking => 
                `<div class="data-item">
                    예약 ID: ${booking.id || 'N/A'}<br>
                    사용자: ${getUserNameById(booking.userId)}<br>
                    영화: ${getMovieTitleById(booking.movieId)}<br>
                    좌석: ${Array.isArray(booking.seats) ? booking.seats.join(', ') : (booking.seats || 'N/A')}<br>
                    예약일: ${booking.bookingDate || new Date().toLocaleDateString('ko-KR')}
                </div>`
            ).join('');
        } else {
            bookingDiv.innerHTML = '<p>예약 내역이 없습니다.</p>';
        }
    }

    async function bookMovie(movieId, movieTitle) {
        try {
            // 간단한 예약 데이터 생성
            const numSeats = Math.floor(Math.random() * 4) + 1; // 1-4석 랜덤
            const seats = [];
            for (let i = 0; i < numSeats; i++) {
                const row = String.fromCharCode(65 + Math.floor(Math.random() * 5)); // A-E
                const num = Math.floor(Math.random() * 10) + 1; // 1-10
                seats.push(`${row}${num}`);
            }
            
            // 첫 번째 사용자를 기본 사용자로 사용 (실제로는 로그인 시스템 필요)
            const defaultUserId = currentUsers.length > 0 ? currentUsers[0].id : 'user-1';
            
            const bookingData = {
                userId: defaultUserId,
                movieId: movieId,
                seats: seats
            };

            const response = await fetch('/bookings/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bookingData)
            });

            if (response.ok) {
                alert(`"${movieTitle}" 영화 예약이 완료되었습니다!`);
                loadBookings(); // 예약 목록 새로고침
            } else {
                alert('예약 처리 중 오류가 발생했습니다.');
            }
        } catch (error) {
            alert('예약 요청 실패: ' + error.message);
        }
    }

    // 멀티클라우드 배포 상태 표시
    async function loadDeploymentStatus() {
        const deploymentDiv = document.getElementById('deployment-status');
        
        try {
            const response = await fetch('/deployment-status');
            const deploymentInfo = await response.json();
            
            displayDeploymentStatus(deploymentInfo);
        } catch (error) {
            console.error('배포 상태 로딩 실패:', error);
            deploymentDiv.innerHTML = '<p style="color: red;">배포 상태 데이터 로딩 실패</p>';
        }
    }

    function displayDeploymentStatus(deploymentInfo) {
        const deploymentDiv = document.getElementById('deployment-status');
        
        if (!deploymentInfo || deploymentInfo.length === 0) {
            deploymentDiv.innerHTML = '<p>배포 상태 정보가 없습니다.</p>';
            return;
        }

        deploymentDiv.innerHTML = `
            <div class="deployment-grid">
                ${deploymentInfo.map(info => `
                    <div class="deployment-item ${info.status === '운영중' ? 'status-running' : 'status-stopped'}">
                        <div class="service-header">
                            <span class="service-icon">${info.icon}</span>
                            <h3>${info.service}</h3>
                        </div>
                        <div class="deployment-details">
                            <div class="detail-row">
                                <strong>클러스터:</strong> ${info.cluster}
                            </div>
                            <div class="detail-row">
                                <strong>네임스페이스:</strong> ${info.namespace}
                            </div>
                            <div class="detail-row">
                                <strong>Pod 이름:</strong> ${info.podName || 'N/A'}
                            </div>
                            <div class="detail-row">
                                <strong>노드:</strong> ${info.nodeName || 'N/A'}
                            </div>
                            <div class="detail-row">
                                <strong>포트:</strong> ${info.port}
                            </div>
                            <div class="detail-row">
                                <strong>최종 확인:</strong> ${info.lastChecked}
                            </div>
                            <div class="detail-row status-row">
                                <strong>상태:</strong> 
                                <span class="status-badge ${info.status === '운영중' ? 'badge-running' : 'badge-stopped'}">
                                    ${info.status}
                                </span>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
            <div class="deployment-summary">
                <h4>☁️ 멀티클라우드 Kubernetes 배포 개요</h4>
                <div class="summary-grid">
                    <div class="summary-item">
                        <strong>네임스페이스</strong><br>
                        ${deploymentInfo[0]?.namespace || 'theater-msa'}
                    </div>
                    <div class="summary-item">
                        <strong>실행 중인 서비스</strong><br>
                        ${deploymentInfo.filter(s => s.status === '운영중').length}개 / ${deploymentInfo.length}개
                    </div>
                </div>
                <p class="deployment-note">
                    <strong>☁️ Kubernetes 환경:</strong> 멀티클라우드 Kubernetes 클러스터<br>
                    <strong>🔗 서비스 메시:</strong> Istio EASTWESTGATEWAY를 통한 클러스터 간 통신<br>
                    <strong>⏰ 실시간 상태:</strong> Kubernetes API를 통한 실제 Pod 상태 수집<br>
                    <strong>📊 모니터링:</strong> Pod, Node, Deployment 상태 실시간 반영
                </p>
            </div>
        `;
    }