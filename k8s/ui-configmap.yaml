apiVersion: v1
kind: ConfigMap
metadata:
  name: ui-files
  namespace: theater-msa
  labels:
    app: theater-msa
    component: ui
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Theater MSA - 클러스터 간 트래픽 분산 시각화</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div class="container">
            <h1>🎬 Theater Management System</h1>
            <p class="subtitle">멀티클라우드 MSA 데모 애플리케이션 - 트래픽 분산 시각화</p>
            
            <div class="data-sections">
                <div class="data-section">
                    <h2>👥 사용자 목록</h2>
                    <div class="traffic-indicator">
                        <div class="traffic-main">
                            <div class="traffic-lights-horizontal" id="user-traffic-lights">
                                <!-- 트래픽 라이트가 여기에 동적으로 추가됩니다 -->
                            </div>
                            <div class="traffic-stats">
                                <div class="stat-item">
                                    <div class="stat-label">설정: <span id="user-weight-info">70%/30%</span></div>
                                    <div class="stat-label">누적: <span id="user-cumulative-info">0%/0%</span></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button onclick="loadUsers()">새로고침</button>
                    <div id="users">로딩 중...</div>
                </div>
                
                <div class="data-section">
                    <h2>🎭 영화 목록</h2>
                    <div class="traffic-indicator">
                        <div class="traffic-main">
                            <div class="traffic-lights-horizontal" id="movie-traffic-lights">
                                <!-- 트래픽 라이트가 여기에 동적으로 추가됩니다 -->
                            </div>
                            <div class="traffic-stats">
                                <div class="stat-item">
                                    <div class="stat-label">설정: <span id="movie-weight-info">30%/70%</span></div>
                                    <div class="stat-label">누적: <span id="movie-cumulative-info">0%/0%</span></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button onclick="loadMovies()">새로고침</button>
                    <div id="movies">로딩 중...</div>
                </div>
                
                <div class="data-section">
                    <h2>🎫 예약 내역</h2>
                    <div class="traffic-indicator">
                        <div class="traffic-main">
                            <div class="traffic-lights-horizontal" id="booking-traffic-lights">
                                <!-- 트래픽 라이트가 여기에 동적으로 추가됩니다 -->
                            </div>
                            <div class="traffic-stats">
                                <div class="stat-item">
                                    <div class="stat-label">설정: <span id="booking-weight-info">50%/50%</span></div>
                                    <div class="stat-label">누적: <span id="booking-cumulative-info">0%/0%</span></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button onclick="loadBookings()">새로고침</button>
                    <div id="bookings">로딩 중...</div>
                </div>
            </div>
            
            <div class="section">
                <h2>☁️ 멀티클라우드 배포 상태</h2>
                <button onclick="loadDeploymentStatus()">상태 확인</button>
                <div id="deployment-status">로딩 중...</div>
            </div>
        </div>
        
        <script src="script.js"></script>
    </body>
    </html>
  style.css: |
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: #2d3748;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        border-radius: 15px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        padding: 30px;
    }

    h1 {
        text-align: center;
        color: #2d3748;
        font-size: 2.2em;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    .subtitle {
        text-align: center;
        color: #718096;
        font-size: 1.1em;
        margin-bottom: 30px;
        font-weight: 300;
    }

    /* 데이터 섹션들을 3열로 배치 */
    .data-sections {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .data-section {
        padding: 15px;
        border: 1px solid #e2e8f0;
        border-radius: 10px;
        background: #f7fafc;
        min-height: 400px;
    }

    .data-section h2 {
        color: #2d3748;
        border-bottom: 2px solid #4299e1;
        padding-bottom: 10px;
        margin-bottom: 15px;
        font-size: 1.2em;
    }

    .data-section button {
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.9em;
        font-weight: 500;
        margin-bottom: 15px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .data-section button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(66, 153, 225, 0.4);
    }

    .traffic-indicator {
        background: #e2e8f0;
        border-radius: 6px;
        padding: 8px;
        margin-bottom: 10px;
        font-size: 0.8em;
    }

    .traffic-main {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .traffic-lights-horizontal {
        display: flex;
        gap: 3px;
        flex-wrap: wrap;
    }

    .light {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 1px solid #cbd5e0;
        font-size: 6px;
        text-align: center;
        line-height: 10px;
        transition: all 0.3s ease;
        background: #f7fafc;
    }

    .light.green {
        background: #10b981;
        color: white;
        border-color: #059669;
        animation: pulse-green 2s ease-in-out infinite;
    }

    .light.red {
        background: #ef4444;
        color: white;
        border-color: #dc2626;
        animation: pulse-red 2s ease-in-out infinite;
    }

    @keyframes pulse-green {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    @keyframes pulse-red {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    .traffic-stats {
        flex: 1;
        text-align: right;
    }

    .stat-label {
        font-size: 0.7em;
        color: #4a5568;
        display: block;
        margin-bottom: 2px;
    }

    .data-section .data-item {
        background: white;
        padding: 10px;
        margin: 8px 0;
        border-radius: 6px;
        border-left: 3px solid #4299e1;
        font-size: 0.9em;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .data-section .data-item:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .user-item, .movie-item, .booking-item {
        background: white;
        padding: 10px;
        margin: 8px 0;
        border-radius: 6px;
        border-left: 3px solid #4299e1;
        font-size: 0.9em;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .user-item:hover, .movie-item:hover, .booking-item:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .user-name, .movie-title, .booking-info {
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 3px;
    }

    .user-email, .movie-details, .booking-details {
        color: #718096;
        font-size: 0.85em;
    }

    .section {
        padding: 20px;
        border: 1px solid #e2e8f0;
        border-radius: 10px;
        background: #f7fafc;
    }

    .section h2 {
        color: #2d3748;
        border-bottom: 2px solid #4299e1;
        padding-bottom: 10px;
        margin-bottom: 20px;
        font-size: 1.3em;
    }

    .section button {
        background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.9em;
        font-weight: 500;
        margin-bottom: 15px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .section button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(66, 153, 225, 0.4);
    }

    .deployment-item {
        background: white;
        padding: 10px;
        margin: 6px 0;
        border-radius: 6px;
        border-left: 3px solid #4299e1;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.9em;
    }

    .deployment-info {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .deployment-icon {
        font-size: 1.1em;
    }

    .deployment-status {
        padding: 3px 6px;
        border-radius: 4px;
        font-size: 0.75em;
        font-weight: 500;
    }

    .status-running {
        background: #d1fae5;
        color: #065f46;
    }

    .status-pending {
        background: #fef3c7;
        color: #92400e;
    }

    .status-failed {
        background: #fee2e2;
        color: #991b1b;
    }

    .status-unknown {
        background: #f3f4f6;
        color: #374151;
    }

    /* 반응형 디자인 */
    @media (max-width: 968px) {
        .data-sections {
            grid-template-columns: 1fr;
            gap: 15px;
        }
        
        .container {
            padding: 20px;
        }
        
        h1 {
            font-size: 1.8em;
        }
        
        .data-section {
            min-height: auto;
            padding: 12px;
        }
        
        .traffic-lights-horizontal {
            gap: 2px;
        }
        
        .light {
            width: 10px;
            height: 10px;
        }
    }

    @media (max-width: 1200px) and (min-width: 969px) {
        .data-sections {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    /* 애니메이션 효과 */
    .data-section {
        animation: fadeInUp 0.5s ease-out;
    }

    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
  script.js: |
    // 전역 변수
    let trafficHistory = {
        user: [],
        movie: [],
        booking: []
    };
    
    let currentUsers = [];
    let currentMovies = [];
    let currentBookings = [];
    
    const maxHistorySize = 100;
    
    // 페이지 로드 시 초기화
    document.addEventListener('DOMContentLoaded', function() {
        initializeTrafficLights();
        initializeData();
        loadUsers();
        loadMovies();
        loadBookings();
        loadDeploymentStatus();
        startPeriodicUpdates();
    });
    
    // 트래픽 라이트 초기화 (16개)
    function initializeTrafficLights() {
        const services = ['user', 'movie', 'booking'];
        services.forEach(service => {
            const container = document.getElementById(`${service}-traffic-lights`);
            container.innerHTML = '';
            for (let i = 0; i < 16; i++) {
                const light = document.createElement('div');
                light.className = 'light';
                light.textContent = '●';
                container.appendChild(light);
            }
        });
    }
    
    // 초기 데이터 설정
    async function initializeData() {
        const users = [
            { name: '홍길동', email: 'hong@example.com' },
            { name: '이순신', email: 'sunshin@example.com' },
            { name: '김유신', email: 'yusin@example.com' }
        ];
        
        const movies = [
            { title: '어벤져스', genre: '액션', year: 2019 },
            { title: '겨울왕국', genre: '애니메이션', year: 2019 },
            { title: '기생충', genre: '드라마', year: 2019 }
        ];
    
        // 사용자 데이터 초기화
        for (const user of users) {
            try {
                await fetch('/users/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(user)
                });
            } catch (error) {
                console.log('사용자 데이터 초기화 중 오류:', error);
            }
        }
    
        // 영화 데이터 초기화
        for (const movie of movies) {
            try {
                await fetch('/movies/', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(movie)
                });
            } catch (error) {
                console.log('영화 데이터 초기화 중 오류:', error);
            }
        }
    }
    
    async function loadUsers() {
        try {
            // 가중치 정보 가져오기
            let weights = { UserServiceCtx1Weight: 70, UserServiceCtx2Weight: 30 };
            try {
                const weightsResponse = await fetch('/traffic-weights');
                weights = await weightsResponse.json();
            } catch (weightError) {
                console.log('가중치 정보 로딩 실패, 기본값 사용');
            }
            
            // 신호등용 클러스터 선택 (가중치 기반)
            const selectedCluster = selectRandomCluster(weights.UserServiceCtx1Weight, weights.UserServiceCtx2Weight);
            
            // 사용자 데이터 로드
            const response = await fetch('/users/');
            const users = await response.json();
            currentUsers = users; // 전역 변수에 저장
            displayUsers(users);
            
            // 트래픽 히스토리에 추가 (신호등용)
            addToLocalHistory('user', selectedCluster);
            
            // 트래픽 라이트 업데이트
            updateTrafficLights('user');
            
            // 가중치 정보 업데이트
            updateServiceDisplay('user', weights.UserServiceCtx1Weight, weights.UserServiceCtx2Weight);
            
        } catch (error) {
            console.error('사용자 로딩 실패:', error);
            document.getElementById('users').innerHTML = '<p style="color: red;">사용자 데이터를 불러올 수 없습니다.</p>';
        }
    }
    
    async function loadMovies() {
        try {
            // 가중치 정보 가져오기
            let weights = { MovieServiceCtx1Weight: 30, MovieServiceCtx2Weight: 70 };
            try {
                const weightsResponse = await fetch('/traffic-weights');
                weights = await weightsResponse.json();
            } catch (weightError) {
                console.log('가중치 정보 로딩 실패, 기본값 사용');
            }
            
            // 신호등용 클러스터 선택 (가중치 기반)
            const selectedCluster = selectRandomCluster(weights.MovieServiceCtx1Weight, weights.MovieServiceCtx2Weight);
            
            const response = await fetch('/movies/');
            const movies = await response.json();
            currentMovies = movies;
            displayMovies(movies);
            
            // 트래픽 히스토리에 추가 (신호등용)
            addToLocalHistory('movie', selectedCluster);
            
            // 트래픽 라이트 업데이트
            updateTrafficLights('movie');
            
            // 가중치 정보 업데이트
            updateServiceDisplay('movie', weights.MovieServiceCtx1Weight, weights.MovieServiceCtx2Weight);
            
        } catch (error) {
            console.error('영화 로딩 실패:', error);
            document.getElementById('movies').innerHTML = '<p style="color: red;">영화 데이터를 불러올 수 없습니다.</p>';
        }
    }
    
    async function loadBookings() {
        try {
            // 가중치 정보 가져오기
            let weights = { BookingServiceCtx1Weight: 50, BookingServiceCtx2Weight: 50 };
            try {
                const weightsResponse = await fetch('/traffic-weights');
                weights = await weightsResponse.json();
            } catch (weightError) {
                console.log('가중치 정보 로딩 실패, 기본값 사용');
            }
            
            // 신호등용 클러스터 선택 (가중치 기반)
            const selectedCluster = selectRandomCluster(weights.BookingServiceCtx1Weight, weights.BookingServiceCtx2Weight);
            
            const response = await fetch('/bookings/');
            const bookings = await response.json();
            currentBookings = bookings;
            displayBookings(bookings);
            
            // 트래픽 히스토리에 추가 (신호등용)
            addToLocalHistory('booking', selectedCluster);
            
            // 트래픽 라이트 업데이트
            updateTrafficLights('booking');
            
            // 가중치 정보 업데이트
            updateServiceDisplay('booking', weights.BookingServiceCtx1Weight, weights.BookingServiceCtx2Weight);
            
        } catch (error) {
            console.error('예약 로딩 실패:', error);
            document.getElementById('bookings').innerHTML = '<p style="color: red;">예약 데이터를 불러올 수 없습니다.</p>';
        }
    }
    
    async function loadDeploymentStatus() {
        try {
            const response = await fetch('/deployment-status');
            const deployments = await response.json();
            displayDeploymentStatus(deployments);
        } catch (error) {
            console.error('배포 상태 로딩 실패:', error);
            document.getElementById('deployment-status').innerHTML = '<p style="color: red;">배포 상태를 불러올 수 없습니다.</p>';
        }
    }
    
    // 가중치 기반 클러스터 선택
    function selectRandomCluster(ctx1Weight, ctx2Weight) {
        const total = ctx1Weight + ctx2Weight;
        if (total === 0) return 'ctx1';
        
        const random = Math.random() * total;
        return random < ctx1Weight ? 'ctx1' : 'ctx2';
    }
    
    // 로컬 트래픽 히스토리에 추가
    function addToLocalHistory(serviceType, cluster) {
        if (!trafficHistory[serviceType]) {
            trafficHistory[serviceType] = [];
        }
        
        trafficHistory[serviceType].push(cluster);
        
        // 최대 크기 제한
        if (trafficHistory[serviceType].length > maxHistorySize) {
            trafficHistory[serviceType] = trafficHistory[serviceType].slice(-maxHistorySize);
        }
    }
    
    // 트래픽 라이트 업데이트
    function updateTrafficLights(serviceType) {
        const container = document.getElementById(`${serviceType}-traffic-lights`);
        const lights = container.querySelectorAll('.light');
        const history = trafficHistory[serviceType] || [];
        
        // 최신 16개 항목만 사용
        const recentHistory = history.slice(-16);
        
        lights.forEach((light, index) => {
            light.className = 'light'; // 기본 클래스 재설정
            
            if (index < recentHistory.length) {
                const cluster = recentHistory[index];
                if (cluster === 'ctx1') {
                    light.classList.add('green');
                } else if (cluster === 'ctx2') {
                    light.classList.add('red');
                }
            }
        });
    }
    
    // 서비스 표시 정보 업데이트
    function updateServiceDisplay(serviceType, ctx1Weight, ctx2Weight) {
        const total = ctx1Weight + ctx2Weight;
        if (total === 0) return;
        
        // 설정 비중 업데이트
        const weightInfo = document.getElementById(`${serviceType}-weight-info`);
        if (weightInfo) {
            const ctx1Percent = Math.round((ctx1Weight / total) * 100);
            const ctx2Percent = Math.round((ctx2Weight / total) * 100);
            weightInfo.textContent = `${ctx1Percent}%/${ctx2Percent}%`;
        }
        
        // 누적 비중 계산 및 업데이트
        const history = trafficHistory[serviceType] || [];
        if (history.length > 0) {
            const ctx1Count = history.filter(cluster => cluster === 'ctx1').length;
            const ctx2Count = history.filter(cluster => cluster === 'ctx2').length;
            const totalCount = ctx1Count + ctx2Count;
            
            if (totalCount > 0) {
                const ctx1CumulativePercent = Math.round((ctx1Count / totalCount) * 100);
                const ctx2CumulativePercent = Math.round((ctx2Count / totalCount) * 100);
                
                const cumulativeInfo = document.getElementById(`${serviceType}-cumulative-info`);
                if (cumulativeInfo) {
                    cumulativeInfo.textContent = `${ctx1CumulativePercent}%/${ctx2CumulativePercent}%`;
                }
            }
        }
    }
    
    function displayUsers(users) {
        const container = document.getElementById('users');
        if (!users || users.length === 0) {
            container.innerHTML = '<p>등록된 사용자가 없습니다.</p>';
            return;
        }
        
        container.innerHTML = users.map(user => `
            <div class="user-item">
                <div class="user-name">${user.name}</div>
                <div class="user-email">${user.email}</div>
            </div>
        `).join('');
    }
    
    function displayMovies(movies) {
        const container = document.getElementById('movies');
        if (!movies || movies.length === 0) {
            container.innerHTML = '<p>등록된 영화가 없습니다.</p>';
            return;
        }
        
        container.innerHTML = movies.map(movie => `
            <div class="movie-item">
                <div class="movie-title">${movie.title}</div>
                <div class="movie-details">${movie.genre} | ${movie.year}년</div>
            </div>
        `).join('');
    }
    
    function displayBookings(bookings) {
        const container = document.getElementById('bookings');
        if (!bookings || bookings.length === 0) {
            container.innerHTML = '<p>등록된 예약이 없습니다.</p>';
            return;
        }
        
        container.innerHTML = bookings.map(booking => `
            <div class="booking-item">
                <div class="booking-info">예약 ID: ${booking.id}</div>
                <div class="booking-details">사용자: ${booking.userId} | 영화: ${booking.movieId} | 좌석: ${booking.seats}개</div>
            </div>
        `).join('');
    }
    
    function displayDeploymentStatus(deployments) {
        const container = document.getElementById('deployment-status');
        if (!deployments || deployments.length === 0) {
            container.innerHTML = '<p>배포 정보를 불러올 수 없습니다.</p>';
            return;
        }
        
        container.innerHTML = deployments.map(deployment => {
            let statusClass = 'status-unknown';
            if (deployment.status === 'Running') statusClass = 'status-running';
            else if (deployment.status === 'Pending') statusClass = 'status-pending';
            else if (deployment.status === 'Failed') statusClass = 'status-failed';
            
            return `
                <div class="deployment-item">
                    <div class="deployment-info">
                        <span class="deployment-icon">${deployment.icon}</span>
                        <span>${deployment.name}</span>
                        <span style="color: #666; font-size: 0.9em;">(${deployment.cluster}:${deployment.port})</span>
                    </div>
                    <span class="deployment-status ${statusClass}">${deployment.status}</span>
                </div>
            `;
        }).join('');
    }
    
    function startPeriodicUpdates() {
        // 배포 상태만 주기적으로 업데이트 (30초마다)
        setInterval(loadDeploymentStatus, 30000);
    }