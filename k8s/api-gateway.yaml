apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: theater-msa
  labels:
    app: api-gateway
    tier: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        tier: frontend
    spec:
      containers:
      - name: api-gateway
        image: api-gateway:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: theater-config
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: ui-files
          mountPath: /app/ui
          readOnly: true
      volumes:
      - name: ui-files
        configMap:
          name: ui-files
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: cluster-name
                operator: In
                values:
                - ctx1
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: theater-msa
  labels:
    app: api-gateway
    tier: frontend
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: api-gateway
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ui-files
  namespace: theater-msa
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Theater MSA</title>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div class="container">
            <h1>Theater Management System</h1>
            <div class="section">
                <h2>Users</h2>
                <button onclick="loadUsers()">Load Users</button>
                <div id="users"></div>
            </div>
            <div class="section">
                <h2>Movies</h2>
                <button onclick="loadMovies()">Load Movies</button>
                <div id="movies"></div>
            </div>
            <div class="section">
                <h2>Bookings</h2>
                <button onclick="loadBookings()">Load Bookings</button>
                <div id="bookings"></div>
            </div>
        </div>
        <script src="script.js"></script>
    </body>
    </html>
  style.css: |
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f5f5f5;
    }
    .container {
        max-width: 1200px;
        margin: 0 auto;
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .section {
        margin: 20px 0;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    button {
        background: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
    }
    button:hover {
        background: #0056b3;
    }
  script.js: |
    async function loadUsers() {
        try {
            const response = await fetch('/users/');
            const users = await response.json();
            document.getElementById('users').innerHTML = JSON.stringify(users, null, 2);
        } catch (error) {
            document.getElementById('users').innerHTML = 'Error loading users';
        }
    }
    async function loadMovies() {
        try {
            const response = await fetch('/movies/');
            const movies = await response.json();
            document.getElementById('movies').innerHTML = JSON.stringify(movies, null, 2);
        } catch (error) {
            document.getElementById('movies').innerHTML = 'Error loading movies';
        }
    }
    async function loadBookings() {
        try {
            const response = await fetch('/bookings/');
            const bookings = await response.json();
            document.getElementById('bookings').innerHTML = JSON.stringify(bookings, null, 2);
        } catch (error) {
            document.getElementById('bookings').innerHTML = 'Error loading bookings';
        }
    }
