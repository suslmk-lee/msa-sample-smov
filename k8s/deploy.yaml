apiVersion: v1
kind: ServiceAccount
metadata:
  name: theater-msa-deployer
  namespace: theater-msa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: theater-msa
  name: theater-msa-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: theater-msa-rolebinding
  namespace: theater-msa
subjects:
- kind: ServiceAccount
  name: theater-msa-deployer
  namespace: theater-msa
roleRef:
  kind: Role
  name: theater-msa-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: theater-msa-init
  namespace: theater-msa
spec:
  template:
    spec:
      serviceAccountName: theater-msa-deployer
      containers:
      - name: init-container
        image: bitnami/kubectl:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          echo "Initializing Theater MSA deployment..."
          kubectl get pods -n theater-msa
          echo "Waiting for all services to be ready..."
          kubectl wait --for=condition=ready pod -l tier=database --timeout=300s -n theater-msa
          kubectl wait --for=condition=ready pod -l tier=backend --timeout=300s -n theater-msa
          kubectl wait --for=condition=ready pod -l tier=frontend --timeout=300s -n theater-msa
          echo "All services are ready!"
      restartPolicy: OnFailure
  backoffLimit: 3